import re
import asyncio
from iogram import Bot, Dispatcher, F
from iogram.types import Message, FSInputFile
from iogram.dispatcher.rules import Command
from iogram.fsm.storage.memory import MemoryStorage
from iogram.fsm.context import FSMContext
from iogram.fsm.state import State, StatesGroup

TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"

bot = Bot(TOKEN)
dp = Dispatcher(storage=MemoryStorage())

YANDEX_URL_REGEX = re.compile(r"https?://yandex\.ru/maps/[\w\d/\-?=&#.%]+")

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserState(StatesGroup):
    waiting = State()


@dp.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç,\n"
        "–∏ —è –ø—Ä–∏—à–ª—é –≤–∞–º PDF-–æ—Ç—á—ë—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º –æ—Ç–∑—ã–≤–æ–≤."
    )


@dp.message(F.text)
async def handle_link(message: Message, state: FSMContext):
    user_data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–æ–∂–∏–¥–∞–Ω–∏–µ"
    if user_data.get("busy"):
        await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ —è –Ω–µ –∑–∞–∫–æ–Ω—á—É –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
        return

    link = message.text.strip()

    if not YANDEX_URL_REGEX.fullmatch(link):
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö.")
        return

    await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...")
    await state.update_data(busy=True)

    try:
        report_path = await generate_report(link)

        await message.answer_document(FSInputFile(report_path))
        await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ! –ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")
    finally:
        await state.update_data(busy=False)


async def generate_report(link: str) -> str:
    import shutil
    await asyncio.sleep(5)  # –∏–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É

    path = "/tmp/sample_report.pdf"
    shutil.copy("example.pdf", path)
    return path


if __name__ == "__main__":
    dp.run_polling(bot)
