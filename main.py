import asyncio
import logging
import re
from pathlib import Path

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import FSInputFile
from aiogram.types import Message
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


from create_infografics import generate_charts
from filter_symbols import clean_review_file
from label_reviews import label_reviews
from parser.parse import parse_reviews
from threshold import filter_labeled_reviews
from generate_summary_section import save_summary_and_examples
from render_pdf import render_pdf_from_template
from summarize import summarize_14_clusters
from json_to_txt import export_annotations_to_txt


API_TOKEN = "TELEGRAM TOKEN HERE"

logging.basicConfig(level=logging.INFO)

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

processing_state = {}  # user_id -> bool


@dp.message(CommandStart())
async def start_handler(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì© –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/aabattalov")]
        ]
    )

    await message.answer(
        "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n"
        "–Ø ‚Äî <b>–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤—ã</b>\n\n"
        "–ú–æ–≥—É —Å–æ–±—Ä–∞—Ç—å —Å –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç –æ—Ç–∑—ã–≤—ã –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏ –∏ –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–∏—à—É—Ç –≥–æ—Å—Ç–∏ ‚Äî —á—Ç–æ –∏–º –Ω—Ä–∞–≤–∏—Ç—Å—è, –∞ —á—Ç–æ –Ω–µ –æ—á–µ–Ω—å.\n\n"
        "–í –∫–æ–Ω—Ü–µ —è –ø—Ä–∏—à–ª—é PDF-–æ—Ç—á—ë—Ç —Å –≥–æ—Ç–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π.",
        reply_markup=keyboard
    )

    await message.answer(
        "üìç –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ <b>—Ä–µ—Å—Ç–æ—Ä–∞–Ω, –∫–∞—Ñ–µ, –∫–æ—Ñ–µ–π–Ω—é –∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è</b> –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö.\n"
        "–ù—É–∂–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>https://yandex.ru/maps/org/–Ω–∞–∑–≤–∞–Ω–∏–µ/id</code>\n\n"
        ""
        "–ê —è –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–ª—è –≤–∞—Å üìÑ <b>–∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤</b> —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è–º–∏ –∏ –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –≤—ã–≤–æ–¥–∞–º–∏."
    )


@dp.message()
async def handle_link(message: Message):
    user_id = message.from_user.id

    if processing_state.get(user_id):
        await message.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –≤–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—â—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.")
        return

    processing_state[user_id] = True
    text = message.text.strip()

    match = re.search(r"/(\d{5,})/", text)
    if not match:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –∑–∞–≤–µ–¥–µ–Ω–∏—è –≤ —Å—Å—ã–ª–∫–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É —Å –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç.\n\n"
            "‚ö†Ô∏è –ù—É–∂–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>https://yandex.ru/maps/org/–Ω–∞–∑–≤–∞–Ω–∏–µ/id</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "<code>https://yandex.ru/maps/org/bro_n/44460425999/</code>"
        )
        processing_state[user_id] = False
        return

    await message.answer(
        f"‚úÖ –°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {text}\n\n"
        "–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –∏ –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç <b>5 –¥–æ 15 –º–∏–Ω—É—Ç</b>, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã.\n\n"
        "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ, —è –ø—Ä–∏—à–ª—é –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!."
    )

    company_id = int(match.group(1))

    try:
        loop = asyncio.get_event_loop()
        company_info = await loop.run_in_executor(None, parse_reviews, company_id)

        progress_msg = await message.answer("–û—Ç–∑—ã–≤—ã —Å–æ–±—Ä–∞–Ω—ã. –ü—Ä–æ–≥—Ä–µ—Å—Å: 40%")

        await loop.run_in_executor(None, clean_review_file, company_id)
        await loop.run_in_executor(None, label_reviews, company_id)
        await loop.run_in_executor(None, filter_labeled_reviews, company_id)
        await loop.run_in_executor(None, summarize_14_clusters, company_id)

        await progress_msg.edit_text("–û—Ç–∑—ã–≤—ã —Ä–∞–∑–º–µ—á–µ–Ω—ã –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–æ–≥—Ä–µ—Å—Å: 80%")

        await loop.run_in_executor(None, generate_charts, company_id)
        await loop.run_in_executor(None, save_summary_and_examples, company_id)
        await loop.run_in_executor(None, render_pdf_from_template, company_id, company_info["name"])

        await progress_msg.delete()

        report_path = Path(f"files/{company_id}/report/output.pdf")
        txt_path = await loop.run_in_executor(None, export_annotations_to_txt, company_id)
        txt_path = Path(txt_path)

        if report_path.exists():
            await bot.send_document(
                chat_id=message.chat.id,
                document=FSInputFile(report_path),
                caption="–í–æ—Ç –≥–æ—Ç–æ–≤—ã–π PDF-–æ—Ç—á—ë—Ç –ø–æ –æ—Ç–∑—ã–≤–∞–º!"
            )
            await bot.send_document(
                chat_id=message.chat.id,
                document=FSInputFile(txt_path),
                caption="–í—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–µ–π –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ."
            )
        else:
            await message.answer("‚ö†Ô∏è –û—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å")
    finally:
        processing_state[user_id] = False


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
